c(rep('#6600CC', 3), rep('#9933FF', 3), rep('#CC99FF',3), rep('#FFFFFF', 3))
heat.colors[c(1,2,5,5,10)]
heat.colors[1,2,5,5,10]
heat.colors[1]
heat.colors <- c(rep('#6600CC',3),rep('#9933FF', 3), rep('#CC99FF',3), rep('#FFFFFF', 3) )
heat.colors[1]
heat.colors[1,2,5,5,10]
heat.colors[c(1,2,5,5,10)]
blogdown:::serve_site()
case.double.cols <- heat.colors[country.n.data$cases_doubling]
colnames(country.n.data)
country.n.data$cases_doubling
cols <- c("8" = "red", "4" = "blue", "6" = "darkgreen", "10" = "orange")
cols
country.n.data$cases_doubling <- as.integer(country.n.data$cases_doubling )
c("8" = "red", "4" = "blue", "6" = "darkgreen", "10" = "orange")
heat.colors <- c(rep('#6600CC', 3), rep('#9933FF', 3), rep('#CC99FF',3), rep( '#FFFFFF', 3))
heat.colors
names(heat.colors) <- 1:12
heat.colors
country.n.data$cases_doubling
unique(world.cum.cases$cases_doubling)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
world.cases <- read.csv('/Users/nancyyu/Documents/R website/First_Website/static/data/WorldCases-10new.csv', sep= ',')
# iterate over countries from latest day down to Days_10case
find_doublingcases <- function(country.table, row.use) {
count <- 1
row.start <- row.use - 1
numrows_lim <- row.use - 10
for (i in row.start:numrows_lim) {
is.double <- as.numeric(country.table$cum_cases[row.use] / country.table$cum_cases[i])
if ( is.double >= 2) {
return(count)
}
else {
count <- count + 1
}
}
return(count)
}
find_doublingdeaths <- function(country.table, row.use) {
count <- 1
row.start <- row.use - 1
numrows_lim <- row.use - 10
for (i in row.start:numrows_lim) {
is.double <- as.numeric(country.table$cum_deaths[row.use] / country.table$cum_deaths[i])
if ( is.double >= 2) {
return(count)
}
else {
count <- count + 1
}
}
return(count)
}
### Calculate number of days it takes for cases to double for
### world.cases
country.codes <- unique(world.cases$countryterritoryCode)
for (i in 1:10) {
# Get the entries for one country
country.rows <- world.cases[world.cases$countryterritoryCode == country.codes[i],]
original.indices <- as.integer(rownames(country.rows))
temp.indices <- 1:nrow(country.rows)
rownames(country.rows) <- temp.indices
# Calculate doubling time for cumulative cases
row.currentcase <- country.rows[country.rows$Days_10cases == 1,]
ind <- as.integer(rownames(row.currentcase))
for (j in ind:nrow(country.rows)) {
country.rows[j,]$cases_doubling <- find_doublingcases(country.rows, j)
}
# Calculate doubling time for cumulative deaths
row.currentdeath <- country.rows[country.rows$Days_5deaths == 1,]
ind.death <- as.integer(rownames(row.currentdeath))
for (k in ind.death:nrow(country.rows)) {
country.rows[k,]$deaths_doubling <- find_doublingdeaths(country.rows, k)
}
# Copy the numbers to the main table
world.cases[original.indices,]$cases_doubling <- country.rows$cases_doubling
world.cases[original.indices,]$deaths_doubling <- country.rows$deaths_doubling
}
write.csv(world.cases, file="/Users/nancyyu/Documents/R website/First_Website/static/data/world.cases.test.csv")
country.codres
country.codes
world.cases <- read.csv('/Users/nancyyu/Documents/R website/First_Website/static/data/WorldCases-10new.csv', sep= ',')
country.codes <- unique(world.cases$countryterritoryCode)
for (i in 1:10) {
# Get the entries for one country
country.rows <- world.cases[world.cases$countryterritoryCode == country.codes[i],]
original.indices <- as.integer(rownames(country.rows))
temp.indices <- 1:nrow(country.rows)
rownames(country.rows) <- temp.indices
# Calculate doubling time for cumulative cases
row.currentcase <- country.rows[country.rows$Days_10cases == 1,]
ind <- as.integer(rownames(row.currentcase))
for (j in ind:nrow(country.rows)) {
country.rows[j,]$cases_doubling <- find_doublingcases(country.rows, j)
}
# Calculate doubling time for cumulative deaths
row.currentdeath <- country.rows[country.rows$Days_5deaths == 1,]
ind.death <- as.integer(rownames(row.currentdeath))
for (k in ind.death:nrow(country.rows)) {
country.rows[k,]$deaths_doubling <- find_doublingdeaths(country.rows, k)
}
# Copy the numbers to the main table
world.cases[original.indices,]$cases_doubling <- country.rows$cases_doubling
world.cases[original.indices,]$deaths_doubling <- country.rows$deaths_doubling
}
colnames(world.cases)
country.rows <- world.cases[world.cases$countryterritoryCode == country.codes[1],]
country.rows
nrow(country.rows)
length(country.codes)
write.csv(world.cases, file="/Users/nancyyu/Documents/R website/First_Website/static/data/world.cases.test.csv")
colnames(country.rows)
world.cases <- read.csv('/Users/nancyyu/Documents/R website/First_Website/static/data/WorldCases-10new.csv', sep= ',')
country.codes <- unique(world.cases$countryterritoryCode)
for (i in 1:10) {
# Get the entries for one country
country.rows <- world.cases[world.cases$countryterritoryCode == country.codes[i],]
original.indices <- as.integer(rownames(country.rows))
temp.indices <- 1:nrow(country.rows)
rownames(country.rows) <- temp.indices
# Calculate doubling time for cumulative cases
row.currentcase <- country.rows[country.rows$cum_10cases == 1,]
ind <- as.integer(rownames(row.currentcase))
for (j in ind:nrow(country.rows)) {
country.rows[j,]$cases_doubling <- find_doublingcases(country.rows, j)
}
# Calculate doubling time for cumulative deaths
row.currentdeath <- country.rows[country.rows$Days_5deaths == 1,]
ind.death <- as.integer(rownames(row.currentdeath))
for (k in ind.death:nrow(country.rows)) {
country.rows[k,]$deaths_doubling <- find_doublingdeaths(country.rows, k)
}
# Copy the numbers to the main table
world.cases[original.indices,]$cases_doubling <- country.rows$cases_doubling
world.cases[original.indices,]$deaths_doubling <- country.rows$deaths_doubling
}
country.rows <- world.cases[world.cases$countryterritoryCode == country.codes[1],]
original.indices <- as.integer(rownames(country.rows))
temp.indices <- 1:nrow(country.rows)
rownames(country.rows) <- temp.indices
row.currentcase <- country.rows[country.rows$cum_10cases == 1,]
ind <- as.integer(rownames(row.currentcase))
ind
row.currentcase
for (j in ind:nrow(country.rows)) {
country.rows[j,]$cases_doubling <- find_doublingcases(country.rows, j)
}
row.currentdeath <- country.rows[country.rows$Days_5deaths == 1,]
ind.death <- as.integer(rownames(row.currentdeath))
for (k in ind.death:nrow(country.rows)) {
country.rows[k,]$deaths_doubling <- find_doublingdeaths(country.rows, k)
}
k
ind.death
world.cases <- read.csv('/Users/nancyyu/Documents/R website/First_Website/static/data/WorldCases-10new.csv', sep= ',')
# iterate over countries from latest day down to Days_10case
find_doublingcases <- function(country.table, row.use) {
count <- 1
row.start <- row.use - 1
numrows_lim <- row.use - 10
for (i in row.start:numrows_lim) {
is.double <- as.numeric(country.table$cum_cases[row.use] / country.table$cum_cases[i])
if ( is.double >= 2) {
return(count)
}
else {
count <- count + 1
}
}
return(count)
}
find_doublingdeaths <- function(country.table, row.use) {
count <- 1
row.start <- row.use - 1
numrows_lim <- row.use - 10
for (i in row.start:numrows_lim) {
is.double <- as.numeric(country.table$cum_deaths[row.use] / country.table$cum_deaths[i])
if ( is.double >= 2) {
return(count)
}
else {
count <- count + 1
}
}
return(count)
}
country.codes <- unique(world.cases$countryterritoryCode)
for (i in 1:10) {
# Get the entries for one country
country.rows <- world.cases[world.cases$countryterritoryCode == country.codes[i],]
original.indices <- as.integer(rownames(country.rows))
temp.indices <- 1:nrow(country.rows)
rownames(country.rows) <- temp.indices
# Calculate doubling time for cumulative cases
row.currentcase <- country.rows[country.rows$Days_10cases == 1,]
ind <- as.integer(rownames(row.currentcase))
for (j in ind:nrow(country.rows)) {
country.rows[j,]$cases_doubling <- find_doublingcases(country.rows, j)
}
# Calculate doubling time for cumulative deaths
row.currentdeath <- country.rows[country.rows$Days_5deaths == 1,]
ind.death <- as.integer(rownames(row.currentdeath))
for (k in ind.death:nrow(country.rows)) {
country.rows[k,]$deaths_doubling <- find_doublingdeaths(country.rows, k)
}
# Copy the numbers to the main table
world.cases[original.indices,]$cases_doubling <- country.rows$cases_doubling
world.cases[original.indices,]$deaths_doubling <- country.rows$deaths_doubling
}
write.csv(world.cases, file="/Users/nancyyu/Documents/R website/First_Website/static/data/world.cases.test.csv")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
View(country.n.data)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
# Choose all the data points for the selected countries starting from Days_100 > 0
#countries.final <- countries.use[countries.use$Code %in% countries.sel & countries.use$Days_100 > 0,]
countries.final <- countries.use[countries.use$State %in% countries.sel & countries.use$Days_100 > 0,]
library('dplyr')
library('ggplot2')
library('RColorBrewer')
library('reshape2')
# To dos:
# - Compare coronavirus death rates with flu virus death rates
# - Plot number of new cases
# - Plot number of deaths
# - Make a Shiny app with adjustable / interactive graphs
# - Kaggle challenge?
setwd('/Users/nancyyu/Documents/CoronaVirusPlots')
options(scipen=100)
#options(stringsAsFactors=FALSE)
`%notin%` <- function(x,y) !(x %in% y)
cumulative.cases <- read.csv('covid-confirmed-cases-since-100th-case.csv', sep=',')
germany.16 <- read.csv('Germany16States.csv', sep=',')
west.europe <- c('Germany', 'France', 'Spain', 'Italy', 'Sweden')
# Filter out "International" and "World"
countries.dont.use <- c('International', 'World')
#countries.use <- cumulative.cases[cumulative.cases$Entity %notin% countries.dont.use, ]
#countries.use <- cumulative.cases[cumulative.cases$Entity %in% west.europe, ]
countries.use <- germany.16[germany.16$Days_100 > 0,]
# Select countries where Days_100 >= 5
#countries.filter <- countries.use[countries.use$Days_100 >= 10,]
countries.filter <- countries.use[countries.use$Days_100 >= 0,]
#countries.sel <- unique(countries.filter$Code)
countries.sel <- unique(countries.filter$State)
# Choose all the data points for the selected countries starting from Days_100 > 0
#countries.final <- countries.use[countries.use$Code %in% countries.sel & countries.use$Days_100 > 0,]
countries.final <- countries.use[countries.use$State %in% countries.sel & countries.use$Days_100 > 0,]
cum.plot <- ggplot(data=countries.final, aes(x=Days_100, y=Total_cases, group=Code, color=Code)) +
geom_line() + geom_point() + scale_color_brewer(palette = 'Set3') +
scale_x_continuous('Days since the 100th case') + scale_y_continuous("Total cases") +
ggtitle('Linear scale') +
theme_minimal()
print(cum.plot)
# Plot 1 == Linear scale for total number of cases
cum.plot <- ggplot(data=countries.final, aes(x=Days_100, y=Total_cases, group=State, color=Code)) +
geom_line() + geom_point() + scale_color_brewer(palette = 'Set3') +
scale_x_continuous('Days since the 100th case') + scale_y_continuous("Total cases") +
ggtitle('Linear scale') +
theme_minimal()
print(cum.plot)
cum.plot <- ggplot(data=countries.final, aes(x=Days_100, y=Total_Cases, group=State, color=Code)) +
geom_line() + geom_point() + scale_color_brewer(palette = 'Set3') +
scale_x_continuous('Days since the 100th case') + scale_y_continuous("Total cases") +
ggtitle('Linear scale') +
theme_minimal()
print(cum.plot)
colors16 <- c('#434343', '#A6CEE3', '#1F78B4', '#B2DF8A', '#33A02C',
'#FB9A99', '#E31A1C', '#FDBF6F', '#FF7F00', '#CAB2D6',
'#6A3D9A', '#FFFF99', '#B15928', '#000000', '#274E13',
'#980000')
# Plot 1 == Linear scale for total number of cases
cum.plot <- ggplot(data=countries.final, aes(x=Days_100, y=Total_Cases, group=State, color=State)) +
geom_line() + geom_point() +
#scale_color_brewer(palette = 'Set3') +
scale_colour_manual(name= "State", values= colors16) +
scale_x_continuous('Days since the 100th case') + scale_y_continuous("Total cases") +
ggtitle('Linear scale') +
theme_minimal()
print(cum.plot)
nrow(countries.final)
nrow(germany.16)
cum.plot <- ggplot(data=countries.final, aes(x=Days_100, y=Total_Cases, group=State, color=State)) +
geom_line() + geom_point(size=0.5) +
#scale_color_brewer(palette = 'Set3') +
scale_colour_manual(name= "State", values= colors16) +
scale_x_continuous('Days since the 100th case') +
scale_y_continuous("Total cases") +
ggtitle('Linear scale') +
theme_minimal()
print(cum.plot)
colors16 <- c('#A6CEE3', '#1F78B4', '#B2DF8A', '#33A02C',
'#FDBF6F', '#FF7F00', '#CAB2D6',
'#6A3D9A', '#FFFF99', '#B15928', '#000000', '#274E13',
'#621AC1', '#C7D7D0', '#E31A1C','#F20CF4')
cum.plot <- ggplot(data=countries.final, aes(x=Days_100, y=Total_Cases, group=State, color=State)) +
geom_line() + geom_point(size=0.5) +
#scale_color_brewer(palette = 'Set3') +
scale_colour_manual(name= "State", values= colors16) +
scale_x_continuous('Days since the 100th case') +
scale_y_continuous("Total cases") +
ggtitle('Linear scale') +
theme_minimal()
print(cum.plot)
cumulative.cases <- read.csv('Germany10States.csv', sep=',')
germany.16 <- read.csv('Germany16States.csv', sep=',')
setwd('/Users/nancyyu/Documents/CoronaVirusPlots')
options(scipen=100)
#options(stringsAsFactors=FALSE)
`%notin%` <- function(x,y) !(x %in% y)
colors16 <- c('#A6CEE3', '#1F78B4', '#B2DF8A', '#33A02C',
'#FDBF6F', '#FF7F00', '#CAB2D6',
'#6A3D9A', '#FFFF99', '#B15928', '#000000', '#466D32',
'#621AC1', '#C7D7D0', '#E31A1C','#F20CF4')
# Filter out "International" and "World"
countries.dont.use <- c('International', 'World')
#countries.use <- cumulative.cases[cumulative.cases$Entity %notin% countries.dont.use, ]
#countries.use <- cumulative.cases[cumulative.cases$Entity %in% west.europe, ]
countries.use <- germany.16[germany.16$Days_100 > 0,]
# Select countries where Days_100 >= 5
#countries.filter <- countries.use[countries.use$Days_100 >= 10,]
countries.filter <- countries.use[countries.use$Days_100 >= 0,]
#countries.sel <- unique(countries.filter$Code)
countries.sel <- unique(countries.filter$State)
countries.final <- countries.use[countries.use$State %in% countries.sel & countries.use$Days_100 > 0,]
# Plot 1 == Linear scale for total number of cases
cum.plot <- ggplot(data=countries.final, aes(x=Days_100, y=Total_Cases, group=State, color=State)) +
geom_line() + geom_point(size=0.5) +
#scale_color_brewer(palette = 'Set3') +
scale_colour_manual(name= "State", values= colors16) +
scale_x_continuous('Days since the 100th case') +
scale_y_continuous("Total cases") +
ggtitle('Linear scale') +
theme_minimal()
print(cum.plot)
cum.plot <- ggplot(data=countries.final, aes(x=Days_100, y=Total_Cases, group=State, color=State)) +
geom_line() + geom_point(size=0.4) +
#scale_color_brewer(palette = 'Set3') +
scale_colour_manual(name= "State", values= colors16) +
scale_x_continuous('Days since the 100th case') +
scale_y_continuous("Total cases") +
ggtitle('Linear scale') +
theme_minimal()
print(cum.plot)
nrow(countries.final)
countries.sel
countries.use <- cumulative.cases[cumulative.cases$Days_100 > 0,]
# Select countries where Days_100 >= 5
#countries.filter <- countries.use[countries.use$Days_100 >= 10,]
countries.filter <- countries.use[countries.use$Days_100 >= 0,]
#countries.sel <- unique(countries.filter$Code)
countries.sel <- unique(countries.filter$State)
# Choose all the data points for the selected countries starting from Days_100 > 0
#countries.final <- countries.use[countries.use$Code %in% countries.sel & countries.use$Days_100 > 0,]
countries.final <- countries.use[countries.use$State %in% countries.sel & countries.use$Days_100 > 0,]
# Plot 1 == Linear scale for total number of cases
cum.plot <- ggplot(data=countries.final, aes(x=Days_100, y=Total_Cases, group=State, color=State)) +
geom_line() + geom_point(size=0.4) +
#scale_color_brewer(palette = 'Set3') +
scale_colour_manual(name= "State", values= colors16) +
scale_x_continuous('Days since the 100th case') +
scale_y_continuous("Total cases") +
ggtitle('Linear scale') +
theme_minimal()
print(cum.plot)
cum.plot <- ggplot(data=countries.final, aes(x=Days_100, y=Total_Cases, group=State, color=State)) +
geom_line() + geom_point(size=0.4) +
#scale_color_brewer(palette = 'Set3') +
scale_colour_manual(name= "State", values= colors16) +
scale_x_continuous('Days since the 100th case') +
scale_y_continuous("Total cases") +
ggtitle('Linear scale') +
theme_minimal()
print(cum.plot)
nrow(countries.final)
countries.use
nrow(countries.use)
nrow(cumulative.cases)
cumulative.cases <- read.csv('Germany10States.csv', sep=',')
germany.16 <- read.csv('Germany16States.csv', sep=',')
nrow(cumulative.cases)
cumulative.cases <- read.csv('Germany10States.csv', sep=',')
germany.16 <- read.csv('Germany16States.csv', sep=',')
nrow(cumulative.cases)
#countries.use <- cumulative.cases[cumulative.cases$Entity %in% west.europe, ]
countries.use <- germany.16[germany.16$Days_100 > 0,]
countries.use <- cumulative.cases[cumulative.cases$Days_100 > 0,]
# Select countries where Days_100 >= 5
#countries.filter <- countries.use[countries.use$Days_100 >= 10,]
countries.filter <- countries.use[countries.use$Days_100 > 0,]
#countries.sel <- unique(countries.filter$Code)
countries.sel <- unique(countries.filter$State)
# Choose all the data points for the selected countries starting from Days_100 > 0
#countries.final <- countries.use[countries.use$Code %in% countries.sel & countries.use$Days_100 > 0,]
countries.final <- countries.use[countries.use$State %in% countries.sel & countries.use$Days_100 > 0,]
# Plot 1 == Linear scale for total number of cases
cum.plot <- ggplot(data=countries.final, aes(x=Days_100, y=Total_Cases, group=State, color=State)) +
geom_line() + geom_point(size=0.4) +
#scale_color_brewer(palette = 'Set3') +
scale_colour_manual(name= "State", values= colors16) +
scale_x_continuous('Days since the 100th case') +
scale_y_continuous("Total cases") +
ggtitle('Linear scale') +
theme_minimal()
print(cum.plot)
nrow(countries.final)
nrow(germany.16)
countries.use <- germany.16[germany.16$Days_100 > 0,]
#countries.use <- cumulative.cases[cumulative.cases$Days_100 > 0,]
# Select countries where Days_100 >= 5
#countries.filter <- countries.use[countries.use$Days_100 >= 10,]
countries.filter <- countries.use[countries.use$Days_100 > 0,]
#countries.sel <- unique(countries.filter$Code)
countries.sel <- unique(countries.filter$State)
# Choose all the data points for the selected countries starting from Days_100 > 0
#countries.final <- countries.use[countries.use$Code %in% countries.sel & countries.use$Days_100 > 0,]
countries.final <- countries.use[countries.use$State %in% countries.sel & countries.use$Days_100 > 0,]
# Plot 1 == Linear scale for total number of cases
cum.plot <- ggplot(data=countries.final, aes(x=Days_100, y=Total_Cases, group=State, color=State)) +
geom_line() + geom_point(size=0.4) +
#scale_color_brewer(palette = 'Set3') +
scale_colour_manual(name= "State", values= colors16) +
scale_x_continuous('Days since the 100th case') +
scale_y_continuous("Total cases") +
ggtitle('Linear scale') +
theme_minimal()
print(cum.plot)
## Plot 2
## Logarithmic style plots
cum.plot2 <- ggplot(data=countries.final, aes(x=Days_100, y=Total_cases, group=Code, color=Code)) +
geom_line() + geom_point() + scale_color_brewer(palette = 'Set3') +
scale_x_continuous(name='Days since the 100th case') + scale_y_log10(name="Total cases") +
ggtitle('Logarithmic scale') +
theme_minimal()
print(cum.plot2)
cum.plot2 <- ggplot(data=countries.final, aes(x=Days_100, y=Total_Cases, group=State, color=State)) +
geom_line() + geom_point() + scale_color_brewer(palette = 'Set3') +
scale_x_continuous(name='Days since the 100th case') + scale_y_log10(name="Total cases") +
ggtitle('Logarithmic scale') +
theme_minimal()
print(cum.plot2)
nrow(countries.final)
nrow(countries.final)
nrow(germany.16)
cum.plot2 <- ggplot(data=countries.final, aes(x=Days_100, y=Total_Cases, group=State, color=State)) +
geom_line() + geom_point() + scale_color_brewer(palette = 'Set3') +
scale_x_continuous(name='Days since the 100th case') + scale_y_log10(name="Total cases") +
ggtitle('Logarithmic scale') +
theme_minimal()
print(cum.plot2)
cum.plot2 <- ggplot(data=countries.final, aes(x=Days_100, y=Total_Cases, group=State, color=State)) +
geom_line() + geom_point() +
#scale_color_brewer(palette = 'Set3') +
scale_colour_manual(name= "State", values= colors16) +
scale_x_continuous(name='Days since the 100th case') + scale_y_log10(name="Total cases") +
ggtitle('Logarithmic scale') +
theme_minimal()
print(cum.plot2)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
