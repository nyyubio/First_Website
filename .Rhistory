blockdown::new_site()
blogdown::new_site()
blogdown:::serve_site()
blogdown::new_site(theme = 'themefisher/liva-hugo')
blogdown::new_site(theme = 'MunifTanjim/minimo')
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
servr::daemon_stop(5)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
servr::daemon_stop(3)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
library('dplyr')
library('dplyr')
library('ggplot2')
library('RColorBrewer')
library('reshape2')
# To dos:
# - Compare coronavirus death rates with flu virus death rates
# - Plot number of new cases
# - Plot number of deaths
# - Make a Shiny app with adjustable / interactive graphs
# - Kaggle challenge?
setwd('/Users/nancyyu/Documents/CoronaVirusPlots')
options(scipen=100)
#options(stringsAsFactors=FALSE)
`%notin%` <- function(x,y) !(x %in% y)
cumulative.cases <- read.csv('covid-confirmed-cases-since-100th-case.csv', sep=',')
west.europe <- c('Germany', 'France', 'Spain', 'Italy', 'Sweden')
# Filter out "International" and "World"
countries.dont.use <- c('International', 'World')
countries.use <- cumulative.cases[cumulative.cases$Entity %notin% countries.dont.use, ]
#countries.use <- cumulative.cases[cumulative.cases$Entity %in% west.europe, ]
# Select countries where Days_100 >= 5
countries.filter <- countries.use[countries.use$Days_100 >= 10,]
countries.sel <- unique(countries.filter$Code)
# Choose all the data points for the selected countries starting from Days_100 > 0
countries.final <- countries.use[countries.use$Code %in% countries.sel & countries.use$Days_100 > 0,]
# Plot 1 == Linear scale for total number of cases
cum.plot <- ggplot(data=countries.final, aes(x=Days_100, y=Total_cases, group=Code, color=Code)) +
geom_line() + geom_point() + scale_color_brewer(palette = 'Set3') +
scale_x_continuous('Days since the 100th case') + scale_y_continuous("Total cases") +
ggtitle('Linear scale') +
theme_minimal()
print(cum.plot)
## Plot 2
## Logarithmic style plots
cum.plot2 <- ggplot(data=countries.final, aes(x=Days_100, y=Total_cases, group=Code, color=Code)) +
geom_line() + geom_point() + scale_color_brewer(palette = 'Set3') +
scale_x_continuous(name='Days since the 100th case') + scale_y_log10(name="Total cases") +
ggtitle('Logarithmic scale') +
theme_minimal()
print(cum.plot2)
library('dplyr')
library('ggplot2')
library('RColorBrewer')
library('reshape2')
# To dos:
# - Compare coronavirus death rates with flu virus death rates
# - Plot number of new cases
# - Plot number of deaths
# - Make a Shiny app with adjustable / interactive graphs
# - Kaggle challenge?
setwd('/Users/nancyyu/Documents/CoronaVirusPlots')
options(scipen=100)
#options(stringsAsFactors=FALSE)
`%notin%` <- function(x,y) !(x %in% y)
#cumulative.cases <- read.csv('covid-confirmed-cases-since-100th-case.csv', sep=',')
cumulative.cases <- read.csv('GermanyTotalCases.csv.csv', sep=',')
# Filter out "International" and "World"
# countries.dont.use <- c('International', 'World')
# countries.use <- cumulative.cases[cumulative.cases$Entity %notin% countries.dont.use, ]
# countries.use <- cumulative.cases[cumulative.cases$Entity %in% west.europe, ]
# Select countries where Days_100 >= 0
countries.final <- countries.use[countries.use$Days_100 >= 0,]
#countries.sel <- unique(countries.filter$Code)
# Choose all the data points for the selected countries starting from Days_100 > 0
#countries.final <- countries.use[countries.use$Code %in% countries.sel & countries.use$Days_100 > 0,]
# Plot 1 == Linear scale for total number of cases
cum.plot <- ggplot(data=countries.final, aes(x=Days_100, y=Total_cases, group=State, color=State)) +
geom_line() + geom_point() + scale_color_brewer(palette = 'Set3') +
scale_x_continuous('Days since the 100th case') + scale_y_continuous("Total cases") +
ggtitle('Linear scale') +
theme_minimal()
print(cum.plot)
library('dplyr')
library('ggplot2')
library('RColorBrewer')
library('reshape2')
# To dos:
# - Compare coronavirus death rates with flu virus death rates
# - Plot number of new cases
# - Plot number of deaths
# - Make a Shiny app with adjustable / interactive graphs
# - Kaggle challenge?
setwd('/Users/nancyyu/Documents/CoronaVirusPlots')
options(scipen=100)
#options(stringsAsFactors=FALSE)
`%notin%` <- function(x,y) !(x %in% y)
#cumulative.cases <- read.csv('covid-confirmed-cases-since-100th-case.csv', sep=',')
cumulative.cases <- read.csv('GermanyTotalCases.csv.csv', sep=',')
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
library('dplyr')
library('ggplot2')
library('RColorBrewer')
library('reshape2')
library('readr')
# To dos:
# - Compare coronavirus death rates with flu virus death rates
# - Plot number of new cases
# - Plot number of deaths
# - Make a Shiny app with adjustable / interactive graphs
# - Kaggle challenge?
setwd('/Users/nancyyu/Documents/CoronaVirusPlots')
options(scipen=100)
#options(stringsAsFactors=FALSE)
`%notin%` <- function(x,y) !(x %in% y)
base_breaks <- function(n = 10){
function(x) {
axisTicks(log10(range(x, na.rm = TRUE)), log = TRUE, n = n)
}
}
#cumulative.cases <- read.csv('covid-confirmed-cases-since-100th-case.csv', sep=',')
#cumulative.cases <- read.csv('GermanyTotalCases10States.csv', sep=',')
cumulative.cases <- read.csv('Germany10States.csv', sep=',')
# Filter out "International" and "World"
# countries.dont.use <- c('International', 'World')
# countries.use <- cumulative.cases[cumulative.cases$Entity %notin% countries.dont.use, ]
# countries.use <- cumulative.cases[cumulative.cases$Entity %in% west.europe, ]
# Select countries where Days_100 >= 0
countries.filter <- cumulative.cases[cumulative.cases$Days_100 >= 0,]
states.sel <- unique(countries.filter$State)
# Choose all the data points for the selected countries starting from Days_100 > 0
countries.final <- countries.filter[countries.filter$State %in% states.sel & countries.filter$Days_100 > 0,]
# Plot 1 == Linear scale for total number of cases
cum.plot <- ggplot(data=countries.final, aes(x=Days_100, y=Total_Cases, group=State, color=State)) +
geom_line() + geom_point(size = 0.2) + scale_color_brewer(palette = 'Paired') +
scale_x_continuous('Days since the 100th case', limits=c(0,20)) + scale_y_continuous("Total cases") +
ggtitle('Linear scale') +
theme_minimal()
print(cum.plot)
## Plot 2
## Logarithmic style plots
logbreaks <- 10^(-10:10)
logminor_breaks <- rep(1:9, 21)*(10^rep(-10:10, each=9))
# To do:
# Change axis labels (100, 500, 1000, 5000, 10000 )
# Add light colored dotted lines for doubles every 2 days, 3 days, 5 days
cum.plot2 <- ggplot(data=countries.final, aes(x=Days_100, y=Total_Cases, group=State, color=State)) +
geom_line() + geom_point(size=0.2) + scale_color_brewer(palette = 'Paired') +
scale_x_continuous(name='Days since the 100th case', limits=c(0,20)) +
scale_y_continuous(name="Total cases", trans = 'log10', breaks = logbreaks, logminor_breaks = minor_breaks) +
annotation_logticks(sides="l") + ggtitle('Logarithmic scale') +
theme_bw()
print(cum.plot2)
# Plot growth rates 3 day averge / 3 previous day cumulative average
growth.plot <- ggplot(data=countries.final, aes(x=Days_100, y=GrowthRate, group=State, color=State)) +
geom_line() + geom_point(size=0.2) + scale_color_brewer(palette = 'Paired') +
scale_x_continuous(name='Days since the 100th case', limits=c(0,20)) +
scale_y_continuous(name="Growth Rate") +
theme_minimal()
print(growth.plot)
blogdown:::serve_site()
library('dplyr')
library('ggplot2')
library('RColorBrewer')
library('reshape2')
library('readr')
# To dos:
# - Compare coronavirus death rates with flu virus death rates
# - Plot number of new cases
# - Plot number of deaths
# - Make a Shiny app with adjustable / interactive graphs
# - Kaggle challenge?
setwd('/Users/nancyyu/Documents/CoronaVirusPlots')
options(scipen=100)
#options(stringsAsFactors=FALSE)
`%notin%` <- function(x,y) !(x %in% y)
base_breaks <- function(n = 10){
function(x) {
axisTicks(log10(range(x, na.rm = TRUE)), log = TRUE, n = n)
}
}
#cumulative.cases <- read.csv('covid-confirmed-cases-since-100th-case.csv', sep=',')
#cumulative.cases <- read.csv('GermanyTotalCases10States.csv', sep=',')
#cumulative.cases <- read.csv('Germany10States.csv', sep=',')
cumulative.cases <- read.csv('covid-confirmed-deaths-since-5th-deaths.csv', sep=',')
library('dplyr')
library('ggplot2')
library('RColorBrewer')
library('reshape2')
library('readr')
# To dos:
# - Compare coronavirus death rates with flu virus death rates
# - Plot number of new cases
# - Plot number of deaths
# - Make a Shiny app with adjustable / interactive graphs
# - Kaggle challenge?
setwd('/Users/nancyyu/Documents/CoronaVirusPlots')
options(scipen=100)
#options(stringsAsFactors=FALSE)
`%notin%` <- function(x,y) !(x %in% y)
base_breaks <- function(n = 10){
function(x) {
axisTicks(log10(range(x, na.rm = TRUE)), log = TRUE, n = n)
}
}
#cumulative.cases <- read.csv('covid-confirmed-cases-since-100th-case.csv', sep=',')
#cumulative.cases <- read.csv('GermanyTotalCases10States.csv', sep=',')
#cumulative.cases <- read.csv('Germany10States.csv', sep=',')
cumulative.cases <- read.csv('covid-confirmed-deaths-since-5th-deaths.csv', sep=',')
cumulative.cases <- read.csv('covid-confirmed-deaths-since-5th-death.csv', sep=',')
countries.use <- c['DEU', 'USA', 'FRA', 'ESP', 'ITA', 'SWE', 'NLD', 'GBR', 'CAN', 'BEL']
countries.filter <- cumulative.cases[cumulative.cases$Code %in% countries.use,]
# Choose all the data points for the selected countries starting from Days_100 > 0
countries.final <- countries.filter[countries.filter$Days5deaths > 0,]
# Plot 1 == Linear scale for total number of cases
cum.plot <- ggplot(data=countries.final, aes(x=Days5days, y=Total_Deaths, group=Code, color=Code)) +
geom_line() + geom_point(size = 0.2) + scale_color_brewer(palette = 'Paired') +
scale_x_continuous('Days since the 5th death') + scale_y_continuous("Total Deaths per Million ppl") +
theme_minimal()
print(cum.plot)
colnames(countries.final)
library('dplyr')
library('ggplot2')
library('RColorBrewer')
library('reshape2')
library('readr')
# To dos:
# - Compare coronavirus death rates with flu virus death rates
# - Plot number of new cases
# - Plot number of deaths
# - Make a Shiny app with adjustable / interactive graphs
# - Kaggle challenge?
setwd('/Users/nancyyu/Documents/CoronaVirusPlots')
options(scipen=100)
#options(stringsAsFactors=FALSE)
`%notin%` <- function(x,y) !(x %in% y)
base_breaks <- function(n = 10){
function(x) {
axisTicks(log10(range(x, na.rm = TRUE)), log = TRUE, n = n)
}
}
#cumulative.cases <- read.csv('covid-confirmed-cases-since-100th-case.csv', sep=',')
#cumulative.cases <- read.csv('GermanyTotalCases10States.csv', sep=',')
#cumulative.cases <- read.csv('Germany10States.csv', sep=',')
cumulative.deaths <- read.csv('covid-confirmed-deaths-since-5th-death.csv', sep=',')
# Filter out "International" and "World"
# countries.dont.use <- c('International', 'World')
# countries.use <- cumulative.cases[cumulative.cases$Entity %notin% countries.dont.use, ]
# countries.use <- cumulative.cases[cumulative.cases$Entity %in% west.europe, ]
#
countries.use <- c['DEU', 'USA', 'FRA', 'ESP', 'ITA', 'SWE', 'NLD', 'GBR', 'CAN', 'BEL']
countries.filter <- cumulative.deaths[cumulative.deaths$Code %in% countries.use,]
# Choose all the data points for the selected countries starting from Days_100 > 0
countries.final <- countries.filter[countries.filter$Days5deaths > 0,]
countries.use <- c('DEU', 'USA', 'FRA', 'ESP', 'ITA', 'SWE', 'NLD', 'GBR', 'CAN', 'BEL')
countries.filter <- cumulative.deaths[cumulative.deaths$Code %in% countries.use,]
countries.final <- countries.filter[countries.filter$Days5deaths > 0,]
# Plot 1 == Linear scale for total number of cases
cum.plot <- ggplot(data=countries.final, aes(x=Days5days, y=Total_Deaths, group=Code, color=Code)) +
geom_line() + geom_point(size = 0.2) + scale_color_brewer(palette = 'Paired') +
scale_x_continuous('Days since the 5th death') + scale_y_continuous("Total Deaths per Million ppl") +
theme_minimal()
print(cum.plot)
cum.plot <- ggplot(data=countries.final, aes(x=Days5deaths, y=Total_Deaths, group=Code, color=Code)) +
geom_line() + geom_point(size = 0.2) + scale_color_brewer(palette = 'Paired') +
scale_x_continuous('Days since the 5th death') + scale_y_continuous("Total Deaths per Million ppl") +
theme_minimal()
print(cum.plot)
library('dplyr')
library('ggplot2')
library('RColorBrewer')
library('reshape2')
library('readr')
# To dos:
# - Compare coronavirus death rates with flu virus death rates
# - Plot number of new cases
# - Plot number of deaths
# - Make a Shiny app with adjustable / interactive graphs
# - Kaggle challenge?
setwd('/Users/nancyyu/Documents/CoronaVirusPlots')
options(scipen=100)
#options(stringsAsFactors=FALSE)
`%notin%` <- function(x,y) !(x %in% y)
base_breaks <- function(n = 10){
function(x) {
axisTicks(log10(range(x, na.rm = TRUE)), log = TRUE, n = n)
}
}
#cumulative.cases <- read.csv('covid-confirmed-cases-since-100th-case.csv', sep=',')
#cumulative.cases <- read.csv('GermanyTotalCases10States.csv', sep=',')
#cumulative.cases <- read.csv('Germany10States.csv', sep=',')
cumulative.deaths <- read.csv('covid-confirmed-deaths-since-5th-death.csv', sep=',')
# Filter out "International" and "World"
# countries.dont.use <- c('International', 'World')
# countries.use <- cumulative.cases[cumulative.cases$Entity %notin% countries.dont.use, ]
# countries.use <- cumulative.cases[cumulative.cases$Entity %in% west.europe, ]
#
countries.use <- c('DEU', 'USA', 'FRA', 'ESP', 'ITA', 'SWE', 'NLD', 'GBR', 'CAN', 'BEL')
countries.filter <- cumulative.deaths[cumulative.deaths$Code %in% countries.use,]
# Choose all the data points for the selected countries starting from Days_100 > 0
countries.final <- countries.filter[countries.filter$Days5deaths > 0,]
# Plot 1 == Linear scale for total number of cases
cum.plot <- ggplot(data=countries.final, aes(x=Days5deaths, y=Total_Deaths, group=Code, color=Code)) +
geom_line() + geom_point(size = 0.2) + scale_color_brewer(palette = 'Paired') +
scale_x_continuous('Days since the 5th death') + scale_y_continuous("Total Deaths per Million ppl") +
theme_minimal()
print(cum.plot)
cum.plot2 <- ggplot(data=countries.final, aes(x=Days5deaths, y=Total_Deaths, group=Code, color=Code)) +
geom_line() + geom_point(size=0.2) + scale_color_brewer(palette = 'Paired') +
scale_x_continuous(name='Days since the 100th case', limits=c(0,40)) +
scale_y_continuous(name="Total cases", trans = 'log10', breaks = logbreaks, logminor_breaks = minor_breaks) +
annotation_logticks(sides="l") + ggtitle('Logarithmic scale') +
theme_bw()
print(cum.plot2)
cum.plot2 <- ggplot(data=countries.final, aes(x=Days5deaths, y=Total_Deaths, group=Code, color=Code)) +
geom_line() + geom_point(size=0.2) + scale_color_brewer(palette = 'Paired') +
scale_x_continuous(name='Days since the 100th case', limits=c(0,40)) +
scale_y_continuous(name="Total cases", trans = 'log10', breaks = logbreaks, minor_breaks = logminor_breaks) +
annotation_logticks(sides="l") + ggtitle('Logarithmic scale') +
theme_bw()
print(cum.plot2)
## Logarithmic style plots
logbreaks <- 10^(-10:10)
logminor_breaks <- rep(1:9, 21)*(10^rep(-10:10, each=9))
cum.plot2 <- ggplot(data=countries.final, aes(x=Days5deaths, y=Total_Deaths, group=Code, color=Code)) +
geom_line() + geom_point(size=0.2) + scale_color_brewer(palette = 'Paired') +
scale_x_continuous(name='Days since the 100th case', limits=c(0,40)) +
scale_y_continuous(name="Total cases", trans = 'log10', breaks = logbreaks, minor_breaks = logminor_breaks) +
annotation_logticks(sides="l") + ggtitle('Logarithmic scale') +
theme_bw()
print(cum.plot2)
View(countries.final)
print(cum.plot)
countries.use
View(countries.filter)
View(countries.final)
View(countries.filter)
countries.final <- countries.filter[countries.filter$Days5deaths != "NA" & countries.filter$Days5deaths > 0,]
View(countries.filter)
countries.final <- countries.filter[!is.na(countries.filter$Days5deaths) & countries.filter$Days5deaths > 0,]
cum.plot <- ggplot(data=countries.final, aes(x=Days5deaths, y=Total_Deaths, group=Code, color=Code)) +
geom_line() + geom_point(size = 0.2) + scale_color_brewer(palette = 'Paired') +
scale_x_continuous('Days since the 5th death') + scale_y_continuous("Total Deaths") +
theme_minimal()
print(cum.plot)
logbreaks <- 10^(-10:10)
logminor_breaks <- rep(1:9, 21)*(10^rep(-10:10, each=9))
# To do:
# Change axis labels (100, 500, 1000, 5000, 10000 )
# Add light colored dotted lines for doubles every 2 days, 3 days, 5 days
cum.plot2 <- ggplot(data=countries.final, aes(x=Days5deaths, y=Total_Deaths, group=Code, color=Code)) +
geom_line() + geom_point(size=0.2) + scale_color_brewer(palette = 'Paired') +
scale_x_continuous(name='Days since the 100th case', limits=c(0,40)) +
scale_y_continuous(name="Total cases", trans = 'log10', breaks = logbreaks, minor_breaks = logminor_breaks) +
annotation_logticks(sides="l") + ggtitle('Logarithmic scale') +
theme_bw()
print(cum.plot2)
library('dplyr')
library('ggplot2')
library('RColorBrewer')
library('reshape2')
library('readr')
# To dos:
# - Compare coronavirus death rates with flu virus death rates
# - Plot number of new cases
# - Plot number of deaths
# - Make a Shiny app with adjustable / interactive graphs
# - Kaggle challenge?
setwd('/Users/nancyyu/Documents/CoronaVirusPlots')
options(scipen=100)
#options(stringsAsFactors=FALSE)
`%notin%` <- function(x,y) !(x %in% y)
base_breaks <- function(n = 10){
function(x) {
axisTicks(log10(range(x, na.rm = TRUE)), log = TRUE, n = n)
}
}
#cumulative.cases <- read.csv('covid-confirmed-cases-since-100th-case.csv', sep=',')
#cumulative.cases <- read.csv('GermanyTotalCases10States.csv', sep=',')
#cumulative.cases <- read.csv('Germany10States.csv', sep=',')
cumulative.deaths <- read.csv('covid-confirmed-deaths-since-5th-death.csv', sep=',')
# Filter out "International" and "World"
# countries.dont.use <- c('International', 'World')
# countries.use <- cumulative.cases[cumulative.cases$Entity %notin% countries.dont.use, ]
# countries.use <- cumulative.cases[cumulative.cases$Entity %in% west.europe, ]
#
countries.use <- c('DEU', 'USA', 'FRA', 'ESP', 'ITA', 'SWE', 'NLD', 'GBR', 'CAN', 'BEL')
countries.filter <- cumulative.deaths[cumulative.deaths$Code %in% countries.use,]
# Choose all the data points for the selected countries starting from Days_100 > 0
countries.final <- countries.filter[!is.na(countries.filter$Days5deaths) & countries.filter$Days5deaths > 0,]
# Plot 1 == Linear scale for total number of cases
cum.plot <- ggplot(data=countries.final, aes(x=Days5deaths, y=Total_Deaths, group=Code, color=Code)) +
geom_line() + geom_point(size = 0.2) + scale_color_brewer(palette = 'Paired') +
scale_x_continuous('Days since the 5th death') + scale_y_continuous("Total Deaths") +
theme_minimal()
print(cum.plot)
## Plot 2
## Logarithmic style plots
logbreaks <- 10^(-10:10)
logminor_breaks <- rep(1:9, 21)*(10^rep(-10:10, each=9))
# To do:
# Change axis labels (100, 500, 1000, 5000, 10000 )
# Add light colored dotted lines for doubles every 2 days, 3 days, 5 days
cum.plot2 <- ggplot(data=countries.final, aes(x=Days5deaths, y=Total_Deaths, group=Code, color=Code)) +
geom_line() + geom_point(size=0.2) + scale_color_brewer(palette = 'Paired') +
scale_x_continuous(name='Days since the 5th death', limits=c(0,40)) +
scale_y_continuous(name="Total deaths", trans = 'log10', breaks = logbreaks, minor_breaks = logminor_breaks) +
annotation_logticks(sides="l") + ggtitle('Logarithmic scale') +
theme_bw()
print(cum.plot2)
# Plot growth rates 3 day averge / 3 previous day cumulative average
growth.plot <- ggplot(data=countries.final, aes(x=Days_100, y=GrowthRate, group=State, color=State)) +
geom_line() + geom_point(size=0.2) + scale_color_brewer(palette = 'Paired') +
scale_x_continuous(name='Days since the 5 th case', limits=c(0,20)) +
scale_y_continuous(name="Growth Rate") +
theme_minimal()
print(growth.plot)
print(cum.plot2)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
colnames(states.final)
