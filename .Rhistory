return(count)
}
### Calculate number of days it takes for cases to double for
### world.cases
country.codes <- unique(world.cases$countryterritoryCode)
for (i in 1:length(country.codes)) {
# Get the entries for one country
country.rows <- world.cases[world.cases$countryterritoryCode == country.codes[i],]
original.indices <- as.integer(rownames(country.rows))
temp.indices <- 1:nrow(country.rows)
rownames(country.rows) <-temp.indices
# Calculate doubling time for cumulative cases
row.currentcase <- country.rows[country.rows$Days_10cases == 1,]
ind <- as.integer(rownames(row.currentcase))
for (j in ind:nrow(country.rows)) {
country.rows[j,]$cases_doubling <- find_doublingcases(country.rows, j)
}
# Calculate doubling time for cumulative deaths
row.currentdeath <- country.rows[country.rows$Days_5deaths == 1,]
ind.death <- as.integer(rownames(row.currentdeath))
for (k in ind.death:nrow(country.rows)) {
country.rows[k,]$deaths_doubling <- find_doublingdeaths(country.rows, k)
}
# Copy the numbers to the main table
world.cases[temp.indices,]$cases_doubling <- country.rows$cases_doubling
world.cases[temp.indices,]$deaths_doubling <- country.rows$deaths_doubling
}
ind
country.rows
length(country.codes)
country.codes
length(country.codes)
country.codes[11]
country.codes[10]
unique(world.cases$countryterritoryCode)
length(unique(world.cases$countryterritoryCode))
for (i in 1:10) {
# Get the entries for one country
country.rows <- world.cases[world.cases$countryterritoryCode == country.codes[i],]
original.indices <- as.integer(rownames(country.rows))
temp.indices <- 1:nrow(country.rows)
rownames(country.rows) <-temp.indices
# Calculate doubling time for cumulative cases
row.currentcase <- country.rows[country.rows$Days_10cases == 1,]
ind <- as.integer(rownames(row.currentcase))
for (j in ind:nrow(country.rows)) {
country.rows[j,]$cases_doubling <- find_doublingcases(country.rows, j)
}
# Calculate doubling time for cumulative deaths
row.currentdeath <- country.rows[country.rows$Days_5deaths == 1,]
ind.death <- as.integer(rownames(row.currentdeath))
for (k in ind.death:nrow(country.rows)) {
country.rows[k,]$deaths_doubling <- find_doublingdeaths(country.rows, k)
}
# Copy the numbers to the main table
world.cases[temp.indices,]$cases_doubling <- country.rows$cases_doubling
world.cases[temp.indices,]$deaths_doubling <- country.rows$deaths_doubling
}
?write.csv
write.csv(world.cases, file="/Users/nancyyu/Documents/R website/First_Website/static/data/world.cases.test.csv", col.names=TRUE, row.names=FALSE, sep="," )
write.csv(world.cases, file="/Users/nancyyu/Documents/R website/First_Website/static/data/world.cases.test.csv")
world.cases <- read.csv('/Users/nancyyu/Documents/R website/First_Website/static/data/WorldCases-10.csv', sep= ',')
# iterate over countries from latest day down to Days_10case
find_doublingcases <- function(country.table, row.use) {
count <- 1
row.start <- row.use - 1
numrows_lim <- row.use - 10
for (i in row.start:numrows_lim) {
is.double <- as.numeric(country.table$cum_cases[row.use] / country.table$cum_cases[i])
if ( is.double >= 2) {
return(count)
}
else {
count <- count + 1
}
}
return(count)
}
find_doublingdeaths <- function(country.table, row.use) {
count <- 1
row.start <- row.use - 1
numrows_lim <- row.use - 10
for (i in row.start:numrows_lim) {
is.double <- as.numeric(country.table$cum_deaths[row.use] / country.table$cum_deaths[i])
if ( is.double >= 2) {
return(count)
}
else {
count <- count + 1
}
}
return(count)
}
### Calculate number of days it takes for cases to double for
### world.cases
country.codes <- unique(world.cases$countryterritoryCode)
for (i in 1:10) {
# Get the entries for one country
country.rows <- world.cases[world.cases$countryterritoryCode == country.codes[i],]
original.indices <- as.integer(rownames(country.rows))
temp.indices <- 1:nrow(country.rows)
rownames(country.rows) <- temp.indices
# Calculate doubling time for cumulative cases
row.currentcase <- country.rows[country.rows$Days_10cases == 1,]
ind <- as.integer(rownames(row.currentcase))
for (j in ind:nrow(country.rows)) {
country.rows[j,]$cases_doubling <- find_doublingcases(country.rows, j)
}
# Calculate doubling time for cumulative deaths
row.currentdeath <- country.rows[country.rows$Days_5deaths == 1,]
ind.death <- as.integer(rownames(row.currentdeath))
for (k in ind.death:nrow(country.rows)) {
country.rows[k,]$deaths_doubling <- find_doublingdeaths(country.rows, k)
}
# Copy the numbers to the main table
world.cases[original.indices,]$cases_doubling <- country.rows$cases_doubling
world.cases[original.indices,]$deaths_doubling <- country.rows$deaths_doubling
}
write.csv(world.cases, file="/Users/nancyyu/Documents/R website/First_Website/static/data/world.cases.test.csv")
blogdown:::serve_site()
blogdown:::serve_site()
library('dplyr')
library('ggplot2')
library('RColorBrewer')
library('reshape2')
library('readr')
# To dos:
# - Compare coronavirus death rates with flu virus death rates
# - Plot number of new cases
# - Plot number of deaths
# - Make a Shiny app with adjustable / interactive graphs
# - Kaggle challenge?
setwd('/Users/nancyyu/Documents/CoronaVirusPlots')
options(scipen=100)
#options(stringsAsFactors=FALSE)
`%notin%` <- function(x,y) !(x %in% y)
base_breaks <- function(n = 10){
function(x) {
axisTicks(log10(range(x, na.rm = TRUE)), log = TRUE, n = n)
}
}
world.cases <- read.csv('/Users/nancyyu/Documents/R website/First_Website/static/data/WorldCases-10.csv', sep= ',')
# iterate over countries from latest day down to Days_10case
find_doublingcases <- function(country.table, row.use) {
count <- 1
row.start <- row.use - 1
numrows_lim <- row.use - 10
for (i in row.start:numrows_lim) {
is.double <- as.numeric(country.table$cum_cases[row.use] / country.table$cum_cases[i])
if ( is.double >= 2) {
return(count)
}
else {
count <- count + 1
}
}
return(count)
}
find_doublingdeaths <- function(country.table, row.use) {
count <- 1
row.start <- row.use - 1
numrows_lim <- row.use - 10
for (i in row.start:numrows_lim) {
is.double <- as.numeric(country.table$cum_deaths[row.use] / country.table$cum_deaths[i])
if ( is.double >= 2) {
return(count)
}
else {
count <- count + 1
}
}
return(count)
}
### Calculate number of days it takes for cases to double for
### world.cases
country.codes <- unique(world.cases$countryterritoryCode)
for (i in 1:10) {
# Get the entries for one country
country.rows <- world.cases[world.cases$countryterritoryCode == country.codes[i],]
original.indices <- as.integer(rownames(country.rows))
temp.indices <- 1:nrow(country.rows)
rownames(country.rows) <- temp.indices
# Calculate doubling time for cumulative cases
row.currentcase <- country.rows[country.rows$Days_10cases == 1,]
ind <- as.integer(rownames(row.currentcase))
for (j in ind:nrow(country.rows)) {
country.rows[j,]$cases_doubling <- find_doublingcases(country.rows, j)
}
# Calculate doubling time for cumulative deaths
row.currentdeath <- country.rows[country.rows$Days_5deaths == 1,]
ind.death <- as.integer(rownames(row.currentdeath))
for (k in ind.death:nrow(country.rows)) {
country.rows[k,]$deaths_doubling <- find_doublingdeaths(country.rows, k)
}
# Copy the numbers to the main table
world.cases[original.indices,]$cases_doubling <- country.rows$cases_doubling
world.cases[original.indices,]$deaths_doubling <- country.rows$deaths_doubling
}
write.csv(world.cases, file="/Users/nancyyu/Documents/R website/First_Website/static/data/world.cases.test.csv")
world.cases <- read.csv('/Users/nancyyu/Documents/R website/First_Website/static/data/WorldCases-10.csv', sep= ',')
# iterate over countries from latest day down to Days_10case
find_doublingcases <- function(country.table, row.use) {
count <- 1
row.start <- row.use - 1
numrows_lim <- row.use - 10
for (i in row.start:numrows_lim) {
is.double <- as.numeric(country.table$cum_cases[row.use] / country.table$cum_cases[i])
if ( is.double >= 2) {
return(count)
}
else {
count <- count + 1
}
}
return(count)
}
find_doublingdeaths <- function(country.table, row.use) {
count <- 1
row.start <- row.use - 1
numrows_lim <- row.use - 10
for (i in row.start:numrows_lim) {
is.double <- as.numeric(country.table$cum_deaths[row.use] / country.table$cum_deaths[i])
if ( is.double >= 2) {
return(count)
}
else {
count <- count + 1
}
}
return(count)
}
### Calculate number of days it takes for cases to double for
### world.cases
country.codes <- unique(world.cases$countryterritoryCode)
for (i in 1:10) {
# Get the entries for one country
country.rows <- world.cases[world.cases$countryterritoryCode == country.codes[i],]
original.indices <- as.integer(rownames(country.rows))
temp.indices <- 1:nrow(country.rows)
rownames(country.rows) <- temp.indices
# Calculate doubling time for cumulative cases
row.currentcase <- country.rows[country.rows$Days_10cases == 1,]
ind <- as.integer(rownames(row.currentcase))
for (j in ind:nrow(country.rows)) {
country.rows[j,]$cases_doubling <- find_doublingcases(country.rows, j)
}
# Calculate doubling time for cumulative deaths
row.currentdeath <- country.rows[country.rows$Days_5deaths == 1,]
ind.death <- as.integer(rownames(row.currentdeath))
for (k in ind.death:nrow(country.rows)) {
country.rows[k,]$deaths_doubling <- find_doublingdeaths(country.rows, k)
}
# Copy the numbers to the main table
world.cases[original.indices,]$cases_doubling <- country.rows$cases_doubling
world.cases[original.indices,]$deaths_doubling <- country.rows$deaths_doubling
}
write.csv(world.cases, file="/Users/nancyyu/Documents/R website/First_Website/static/data/world.cases.test.csv")
?geom_tile
vignette('ggplot2-specs')
rescale(1:100)
library(scale)
library(scales)
rescale(1:100)
rescale(1)
world.cum.cases <- read_csv(here("static", "data", "WorldCases-10.csv"))
country.codes <- unique(world.cum.cases$countryterritoryCode)
country.n.data <- world.cum.cases[world.cum.cases$countryterritoryCode == 1,]
world.cases <- read.csv('/Users/nancyyu/Documents/R website/First_Website/static/data/WorldCases-10.csv', sep= ',')
world.cum.cases <- world.cases
country.codes <- unique(world.cum.cases$countryterritoryCode)
country.n.data <- world.cum.cases[world.cum.cases$countryterritoryCode == 1,]
rescale(country.n.data$cases_doubling)
country.n.data$cases_doubling
country.n.data$cases_doubling
country.n.data
country.codes <- unique(world.cum.cases$countryterritoryCode)
country.n.data <- world.cum.cases[world.cum.cases$countryterritoryCode == country.codes[1],]
country.n.data
rescale(country.n.data$cases_doubling)
country.n.data$cases_doubling
blogdown:::serve_site()
world.cases <- read.csv('/Users/nancyyu/Documents/R website/First_Website/static/data/WorldCases-10.csv', sep= ',')
world.cum.cases <- world.cases
country.n.data <- world.cum.cases[world.cum.cases$countryterritoryCode == country.codes[1],]
country.codes <- unique(world.cum.cases$countryterritoryCode)
country.n.data <- world.cum.cases[world.cum.cases$countryterritoryCode == country.codes[1],]
country.n.data$cases_doubling
rescale(country.n.data$cases_doubling)
library('scales')
rescale(country.n.data$cases_doubling)
c(rep('#6600CC', 3), rep('#9933FF', 3), c('#CC99FF',3), rep('#FFFFFF', 3))
c(rep('#6600CC', 3), rep('#9933FF', 3), rep('#CC99FF',3), rep('#FFFFFF', 3))
heat.colors[c(1,2,5,5,10)]
heat.colors[1,2,5,5,10]
heat.colors[1]
heat.colors <- c(rep('#6600CC',3),rep('#9933FF', 3), rep('#CC99FF',3), rep('#FFFFFF', 3) )
heat.colors[1]
heat.colors[1,2,5,5,10]
heat.colors[c(1,2,5,5,10)]
blogdown:::serve_site()
case.double.cols <- heat.colors[country.n.data$cases_doubling]
colnames(country.n.data)
country.n.data$cases_doubling
cols <- c("8" = "red", "4" = "blue", "6" = "darkgreen", "10" = "orange")
cols
country.n.data$cases_doubling <- as.integer(country.n.data$cases_doubling )
c("8" = "red", "4" = "blue", "6" = "darkgreen", "10" = "orange")
heat.colors <- c(rep('#6600CC', 3), rep('#9933FF', 3), rep('#CC99FF',3), rep( '#FFFFFF', 3))
heat.colors
names(heat.colors) <- 1:12
heat.colors
country.n.data$cases_doubling
unique(world.cum.cases$cases_doubling)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
world.cases <- read.csv('/Users/nancyyu/Documents/R website/First_Website/static/data/WorldCases-10new.csv', sep= ',')
# iterate over countries from latest day down to Days_10case
find_doublingcases <- function(country.table, row.use) {
count <- 1
row.start <- row.use - 1
numrows_lim <- row.use - 10
for (i in row.start:numrows_lim) {
is.double <- as.numeric(country.table$cum_cases[row.use] / country.table$cum_cases[i])
if ( is.double >= 2) {
return(count)
}
else {
count <- count + 1
}
}
return(count)
}
find_doublingdeaths <- function(country.table, row.use) {
count <- 1
row.start <- row.use - 1
numrows_lim <- row.use - 10
for (i in row.start:numrows_lim) {
is.double <- as.numeric(country.table$cum_deaths[row.use] / country.table$cum_deaths[i])
if ( is.double >= 2) {
return(count)
}
else {
count <- count + 1
}
}
return(count)
}
### Calculate number of days it takes for cases to double for
### world.cases
country.codes <- unique(world.cases$countryterritoryCode)
for (i in 1:10) {
# Get the entries for one country
country.rows <- world.cases[world.cases$countryterritoryCode == country.codes[i],]
original.indices <- as.integer(rownames(country.rows))
temp.indices <- 1:nrow(country.rows)
rownames(country.rows) <- temp.indices
# Calculate doubling time for cumulative cases
row.currentcase <- country.rows[country.rows$Days_10cases == 1,]
ind <- as.integer(rownames(row.currentcase))
for (j in ind:nrow(country.rows)) {
country.rows[j,]$cases_doubling <- find_doublingcases(country.rows, j)
}
# Calculate doubling time for cumulative deaths
row.currentdeath <- country.rows[country.rows$Days_5deaths == 1,]
ind.death <- as.integer(rownames(row.currentdeath))
for (k in ind.death:nrow(country.rows)) {
country.rows[k,]$deaths_doubling <- find_doublingdeaths(country.rows, k)
}
# Copy the numbers to the main table
world.cases[original.indices,]$cases_doubling <- country.rows$cases_doubling
world.cases[original.indices,]$deaths_doubling <- country.rows$deaths_doubling
}
write.csv(world.cases, file="/Users/nancyyu/Documents/R website/First_Website/static/data/world.cases.test.csv")
country.codres
country.codes
world.cases <- read.csv('/Users/nancyyu/Documents/R website/First_Website/static/data/WorldCases-10new.csv', sep= ',')
country.codes <- unique(world.cases$countryterritoryCode)
for (i in 1:10) {
# Get the entries for one country
country.rows <- world.cases[world.cases$countryterritoryCode == country.codes[i],]
original.indices <- as.integer(rownames(country.rows))
temp.indices <- 1:nrow(country.rows)
rownames(country.rows) <- temp.indices
# Calculate doubling time for cumulative cases
row.currentcase <- country.rows[country.rows$Days_10cases == 1,]
ind <- as.integer(rownames(row.currentcase))
for (j in ind:nrow(country.rows)) {
country.rows[j,]$cases_doubling <- find_doublingcases(country.rows, j)
}
# Calculate doubling time for cumulative deaths
row.currentdeath <- country.rows[country.rows$Days_5deaths == 1,]
ind.death <- as.integer(rownames(row.currentdeath))
for (k in ind.death:nrow(country.rows)) {
country.rows[k,]$deaths_doubling <- find_doublingdeaths(country.rows, k)
}
# Copy the numbers to the main table
world.cases[original.indices,]$cases_doubling <- country.rows$cases_doubling
world.cases[original.indices,]$deaths_doubling <- country.rows$deaths_doubling
}
colnames(world.cases)
country.rows <- world.cases[world.cases$countryterritoryCode == country.codes[1],]
country.rows
nrow(country.rows)
length(country.codes)
write.csv(world.cases, file="/Users/nancyyu/Documents/R website/First_Website/static/data/world.cases.test.csv")
colnames(country.rows)
world.cases <- read.csv('/Users/nancyyu/Documents/R website/First_Website/static/data/WorldCases-10new.csv', sep= ',')
country.codes <- unique(world.cases$countryterritoryCode)
for (i in 1:10) {
# Get the entries for one country
country.rows <- world.cases[world.cases$countryterritoryCode == country.codes[i],]
original.indices <- as.integer(rownames(country.rows))
temp.indices <- 1:nrow(country.rows)
rownames(country.rows) <- temp.indices
# Calculate doubling time for cumulative cases
row.currentcase <- country.rows[country.rows$cum_10cases == 1,]
ind <- as.integer(rownames(row.currentcase))
for (j in ind:nrow(country.rows)) {
country.rows[j,]$cases_doubling <- find_doublingcases(country.rows, j)
}
# Calculate doubling time for cumulative deaths
row.currentdeath <- country.rows[country.rows$Days_5deaths == 1,]
ind.death <- as.integer(rownames(row.currentdeath))
for (k in ind.death:nrow(country.rows)) {
country.rows[k,]$deaths_doubling <- find_doublingdeaths(country.rows, k)
}
# Copy the numbers to the main table
world.cases[original.indices,]$cases_doubling <- country.rows$cases_doubling
world.cases[original.indices,]$deaths_doubling <- country.rows$deaths_doubling
}
country.rows <- world.cases[world.cases$countryterritoryCode == country.codes[1],]
original.indices <- as.integer(rownames(country.rows))
temp.indices <- 1:nrow(country.rows)
rownames(country.rows) <- temp.indices
row.currentcase <- country.rows[country.rows$cum_10cases == 1,]
ind <- as.integer(rownames(row.currentcase))
ind
row.currentcase
for (j in ind:nrow(country.rows)) {
country.rows[j,]$cases_doubling <- find_doublingcases(country.rows, j)
}
row.currentdeath <- country.rows[country.rows$Days_5deaths == 1,]
ind.death <- as.integer(rownames(row.currentdeath))
for (k in ind.death:nrow(country.rows)) {
country.rows[k,]$deaths_doubling <- find_doublingdeaths(country.rows, k)
}
k
ind.death
world.cases <- read.csv('/Users/nancyyu/Documents/R website/First_Website/static/data/WorldCases-10new.csv', sep= ',')
# iterate over countries from latest day down to Days_10case
find_doublingcases <- function(country.table, row.use) {
count <- 1
row.start <- row.use - 1
numrows_lim <- row.use - 10
for (i in row.start:numrows_lim) {
is.double <- as.numeric(country.table$cum_cases[row.use] / country.table$cum_cases[i])
if ( is.double >= 2) {
return(count)
}
else {
count <- count + 1
}
}
return(count)
}
find_doublingdeaths <- function(country.table, row.use) {
count <- 1
row.start <- row.use - 1
numrows_lim <- row.use - 10
for (i in row.start:numrows_lim) {
is.double <- as.numeric(country.table$cum_deaths[row.use] / country.table$cum_deaths[i])
if ( is.double >= 2) {
return(count)
}
else {
count <- count + 1
}
}
return(count)
}
country.codes <- unique(world.cases$countryterritoryCode)
for (i in 1:10) {
# Get the entries for one country
country.rows <- world.cases[world.cases$countryterritoryCode == country.codes[i],]
original.indices <- as.integer(rownames(country.rows))
temp.indices <- 1:nrow(country.rows)
rownames(country.rows) <- temp.indices
# Calculate doubling time for cumulative cases
row.currentcase <- country.rows[country.rows$Days_10cases == 1,]
ind <- as.integer(rownames(row.currentcase))
for (j in ind:nrow(country.rows)) {
country.rows[j,]$cases_doubling <- find_doublingcases(country.rows, j)
}
# Calculate doubling time for cumulative deaths
row.currentdeath <- country.rows[country.rows$Days_5deaths == 1,]
ind.death <- as.integer(rownames(row.currentdeath))
for (k in ind.death:nrow(country.rows)) {
country.rows[k,]$deaths_doubling <- find_doublingdeaths(country.rows, k)
}
# Copy the numbers to the main table
world.cases[original.indices,]$cases_doubling <- country.rows$cases_doubling
world.cases[original.indices,]$deaths_doubling <- country.rows$deaths_doubling
}
write.csv(world.cases, file="/Users/nancyyu/Documents/R website/First_Website/static/data/world.cases.test.csv")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
